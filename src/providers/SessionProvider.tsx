import { FC, ReactNode, useEffect } from "react";
import { usePathname, useRouter } from "next/navigation";
import { useGetMeQuery, usePostRefreshTokenMutation } from "@/redux/api/auth";
import Cookies from "js-cookie";

interface SessionProviderProps {
  children: ReactNode;
}

export const SessionProvider: FC<SessionProviderProps> = ({ children }) => {
  const { status } = useGetMeQuery();
  const [refreshTokenMutation] = usePostRefreshTokenMutation();
  const pathname = usePathname();

  const handleRefreshToken = async () => {
    const token = Cookies.get("token");
    const refreshToken = Cookies.get("refresh");

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    if (!refreshToken || !token) {
      console.warn("–¢–æ–∫–µ–Ω –∏–ª–∏ refresh —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.");
      return;
    }

    try {
      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
      const { exp } = JSON.parse(atob(token.split(".")[1]));
      const accessTokenExpiration = exp * 1000;

      console.log(
        "üöÄ ~ handleRefreshToken ~ accessTokenExpiration:",
        accessTokenExpiration
      );

      if (accessTokenExpiration < new Date().getTime()) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã
        Cookies.remove("token");

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
        const { data: responseData } = await refreshTokenMutation({
          refresh: refreshToken,
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
        Cookies.set("token", responseData?.access as string);
        Cookies.set("refresh", responseData?.refresh as string);

        console.log("–¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.");
      } else {
        console.log("–¢–æ–∫–µ–Ω –µ—â–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", error);

      // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
      Cookies.remove("token");
      Cookies.remove("refresh");
    }
  };

  useEffect(() => {
    handleRefreshToken();
  }, []);

  return <>{children}</>;
};
