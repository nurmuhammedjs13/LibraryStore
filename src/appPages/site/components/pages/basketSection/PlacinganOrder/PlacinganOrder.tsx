"use client";
import React, { useState, useMemo, ChangeEvent, FormEvent } from "react";
import Image from "next/image";
import DeleteIcon from "@/assets/Icons/DeleteIcon";
import Minus from "@/assets/Icons/Minus";
import Plus from "@/assets/Icons/Plus";
import Price from "@/assets/Icons/Price";
import ImgStop from "@/assets/Icons/imgStop";
import styles from "./PlacinganOrder.module.scss";
import {
    useGetCartItemsQuery,
    useDeleteCartMutation,
    useUpdateQuantityMutation,
} from "@/redux/api/addToCart";
import { usePostRegDeliveryMutation } from "@/redux/api/regDelivery";
import { usePostRegPickUpMutation } from "@/redux/api/regPickup";
import { useGetMeQuery } from "@/redux/api/auth";
import { useGetRegDeliveryQuery } from "@/redux/api/regDelivery";
import axios from "axios";

interface CartItem {
    id: number;
    books: {
        id: number;
        book_images: Array<{
            book_images: string;
        }>;
        book_name: string;
        author: string;
        price: number;
    };
    quantity: number;
    books_id?: number;
}
interface FormData {
    firstName: string;
    lastName: string;
    email: string;
    phone: string;
    address?: string;
    comments: string;
    receipt?: File;
}

interface ValidationErrorResponse {
    status: number;
    data: {
        detail?: string;
        [key: string]: unknown;
    };
}

const PlacinganOrder = () => {
    const { data: cartData = [], isLoading } = useGetCartItemsQuery();
    const [deleteCartItem] = useDeleteCartMutation();
    const [postRegDelivery] = usePostRegDeliveryMutation();
    const { data: meData } = useGetMeQuery();
    const [postRegPickUp] = usePostRegPickUpMutation();
    const [updateQuantity] = useUpdateQuantityMutation();
    const { data: deliveryList, error: deliveryError } =
        useGetRegDeliveryQuery();

    const [activeButton, setActiveButton] = useState<"delivery" | "pickup">(
        "delivery"
    );
    const [validationError, setValidationError] = useState<string>("");
    const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
    const [formData, setFormData] = useState<FormData>({
        firstName: "",
        lastName: "",
        email: "",
        phone: "",
        address: "",
        comments: "",
        receipt: undefined,
    });

    const TOKEN = process.env.NEXT_PUBLIC_OKUKG_TELEGRAM_BOT;
    const CHAT_ID = process.env.NEXT_PUBLIC_OKUKG_CHAT_ID;

    const formatDate = (isoString: string): string => {
        const date = new Date(isoString);
        const hours = date.getHours().toString().padStart(2, "0");
        const minutes = date.getMinutes().toString().padStart(2, "0");
        const day = date.getDate().toString().padStart(2, "0");
        const month = (date.getMonth() + 1).toString().padStart(2, "0");
        const year = date.getFullYear();

        return `${hours}:${minutes} - ${day}-${month}-${year}`;
    };

    const uniqueCartItems = useMemo(() => {
        if (!Array.isArray(cartData)) return [];

        const seen = new Map<string, number>();
        const uniqueItems: CartItem[] = [];

        cartData.forEach((item) => {
            if (!item?.books) return;

            const key = `${item.books.id}-${item.books.book_name}-${item.books.author}`;

            if (seen.has(key)) {
                const existingItemIndex = seen.get(key)!;
                const updatedItem: CartItem = {
                    ...uniqueItems[existingItemIndex],
                    quantity:
                        uniqueItems[existingItemIndex].quantity + item.quantity,
                };
                uniqueItems[existingItemIndex] = updatedItem;

                deleteCartItem(item.id);
            } else {
                seen.set(key, uniqueItems.length);
                uniqueItems.push({
                    ...item,
                    books_id: item.books.id,
                });
            }
        });

        return uniqueItems;
    }, [cartData, deleteCartItem]);

    const handleDelete = async (id: number) => {
        try {
            await deleteCartItem(id).unwrap();
        } catch (error) {
            console.error("Error deleting item:", error);
            setValidationError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞");
        }
    };

    const handleQuantityChange = async (
        id: number,
        currentQuantity: number,
        increment: boolean
    ) => {
        const newQuantity = increment
            ? currentQuantity + 1
            : Math.max(1, currentQuantity - 1);
        try {
            await updateQuantity({ id, quantity: newQuantity }).unwrap();
        } catch (error) {
            console.error("Error updating quantity:", error);
            setValidationError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞");
        }
    };

    const calculateTotalQuantity = () => {
        return uniqueCartItems.reduce((sum, item) => sum + item.quantity, 0);
    };

    const calculateTotal = () => {
        return uniqueCartItems.reduce(
            (sum, item) => sum + item.books.price * item.quantity,
            0
        );
    };

    const sendToTelegram = async (orderData: {
        client_first_name: string;
        client_last_name: string;
        client_email: string;
        client_phone_number: string;
        delivery: string;
        created_at: string;
        text: string;
        client_address?: string;
        total_price: number;
        total_items: number;
        receipt?: File;
    }) => {
        if (!TOKEN || !CHAT_ID) {
            console.error("Telegram credentials not configured");
            return;
        }

        try {
            const sanitizeText = (text: string) => {
                return text.trim().replace(/[<>]/g, "");
            };

            // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const messageTG = `
üõç *–ù–û–í–´–ô –ó–ê–ö–ê–ó*

üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ*
‚Ä¢ –ò–º—è: ${sanitizeText(orderData.client_first_name)}
‚Ä¢ –§–∞–º–∏–ª–∏—è: ${sanitizeText(orderData.client_last_name)}
‚Ä¢ Email: ${sanitizeText(orderData.client_email)}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${sanitizeText(orderData.client_phone_number)}

üì¶ *–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞*
‚Ä¢ –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: ${orderData.delivery}
${
    orderData.client_address
        ? `‚Ä¢ –ê–¥—Ä–µ—Å: ${sanitizeText(orderData.client_address)}\n`
        : ""
}
‚Ä¢ –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: ${formatDate(orderData.created_at)}
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: ${orderData.total_items}
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: ${orderData.total_price} —Å–æ–º

üí≠ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π*: ${
                orderData.text
                    ? sanitizeText(orderData.text)
                    : "–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
            }`;

            await axios.post(
                `https://api.telegram.org/bot${TOKEN}/sendMessage`,
                {
                    chat_id: CHAT_ID,
                    parse_mode: "MarkdownV2",
                    text: messageTG.replace(/[_*[\]()~`>#+\-=|{}.!]/g, "\\$&"),
                }
            );

            // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–∫–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if (orderData.receipt) {
                const formData = new FormData();
                formData.append("photo", orderData.receipt);
                formData.append("chat_id", CHAT_ID);
                formData.append("caption", "–ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ");

                await axios.post(
                    `https://api.telegram.org/bot${TOKEN}/sendPhoto`,
                    formData,
                    {
                        headers: {
                            "Content-Type": "multipart/form-data",
                        },
                    }
                );
            }

            console.log("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram");
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", error);
            if (axios.isAxiosError(error)) {
                console.error("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", error.response?.data);
            }
        }
    };
    const handleSubmitOrder = async (e: FormEvent) => {
        e.preventDefault();
        if (isSubmitting) return;

        setIsSubmitting(true);
        setValidationError("");

        try {
            if (uniqueCartItems.length === 0) {
                throw new Error("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!");
            }

            // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            if (
                !formData.firstName ||
                !formData.lastName ||
                !formData.email ||
                !formData.phone
            ) {
                throw new Error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è");
            }

            if (activeButton === "delivery" && !formData.address) {
                throw new Error("–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
            }

            if (!formData.receipt) {
                throw new Error("–ß–µ–∫ –æ–ø–ª–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if (!meData?.id) {
                throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
            }

            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–±—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
            const commonFormData = new FormData();

            // –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ—Ä–∑–∏–Ω—ã
            commonFormData.append("client", String(Number(meData.id)));
            commonFormData.append("cart_id", String(Number(meData.id)));

            // –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
            commonFormData.append(
                "client_first_name",
                formData.firstName.trim()
            );
            commonFormData.append("client_last_name", formData.lastName.trim());
            commonFormData.append("client_email", formData.email.trim());
            commonFormData.append("client_phone_number", formData.phone);

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (formData.comments) {
                commonFormData.append("text", formData.comments.trim());
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ
            if (formData.receipt instanceof File) {
                commonFormData.append("check_order", formData.receipt);
            }

            let response;
            // –†–∞–∑–¥–µ–ª—è–µ–º –ª–æ–≥–∏–∫—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Å–∞–º–æ–≤—ã–≤–æ–∑–∞
            if (activeButton === "delivery") {
                // –î–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
                commonFormData.append("delivery", "–¥–æ—Å—Ç–∞–≤–∫–∞");

                // –ê–¥—Ä–µ—Å —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
                if (formData.address) {
                    commonFormData.append(
                        "client_address",
                        formData.address.trim()
                    );
                }

                // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
                console.log(
                    "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:",
                    Object.fromEntries(commonFormData)
                );

                response = await postRegDelivery(commonFormData).unwrap();
                console.log("–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç (–¥–æ—Å—Ç–∞–≤–∫–∞):", response);

                // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
                await sendToTelegram({
                    client_first_name: formData.firstName,
                    client_last_name: formData.lastName,
                    client_email: formData.email,
                    client_phone_number: formData.phone,
                    delivery: "–¥–æ—Å—Ç–∞–≤–∫–∞",
                    created_at: new Date().toISOString(),
                    text: formData.comments,
                    client_address: formData.address,
                    total_price: calculateTotal(),
                    total_items: calculateTotalQuantity(),
                    receipt: formData.receipt,
                });

                alert("–ó–∞–∫–∞–∑ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!");
            } else {
                // –î–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ FormData –∫–∞–∫ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏,
                // –Ω–æ —Å –¥—Ä—É–≥–∏–º —Ç–∏–ø–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –±–µ–∑ –∞–¥—Ä–µ—Å–∞

                // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –æ–±—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                const pickupFormData = new FormData();

                // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –æ–±—â–∏–µ –ø–æ–ª—è
                for (const [key, value] of commonFormData.entries()) {
                    pickupFormData.append(key, value);
                }

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø "—Å–∞–º–æ–≤—ã–≤–æ–∑"
                pickupFormData.append("delivery", "—Å–∞–º–æ–≤—ã–≤–æ–∑");

                // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ cart, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –æ–∂–∏–¥–∞—Ç—å API
                pickupFormData.append("cart", String(Number(meData.id)));

                // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞
                console.log(
                    "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞:",
                    Object.fromEntries(pickupFormData)
                );

                try {
                    response = await postRegPickUp(pickupFormData).unwrap();
                    console.log("–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç (—Å–∞–º–æ–≤—ã–≤–æ–∑):", response);

                    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞
                    await sendToTelegram({
                        client_first_name: formData.firstName,
                        client_last_name: formData.lastName,
                        client_email: formData.email,
                        client_phone_number: formData.phone,
                        delivery: "—Å–∞–º–æ–≤—ã–≤–æ–∑",
                        created_at: new Date().toISOString(),
                        text: formData.comments,
                        total_price: calculateTotal(),
                        total_items: calculateTotalQuantity(),
                        receipt: formData.receipt,
                    });

                    alert("–ó–∞–∫–∞–∑ —Å —Å–∞–º–æ–≤—ã–≤–æ–∑–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!");
                } catch (pickupError) {
                    console.error(
                        "–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑–∞:",
                        pickupError
                    );

                    console.log(
                        "–ü—Ä–æ–±—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è API —Å–∞–º–æ–≤—ã–≤–æ–∑–∞..."
                    );

                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
                    // –ò—Å–∫–ª—é—á–∞–µ–º FormData, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π JSON
                    const pickupData = {
                        client: Number(meData.id),
                        cart_id: Number(meData.id),
                        cart: Number(meData.id),
                        client_first_name: formData.firstName.trim(),
                        client_last_name: formData.lastName.trim(),
                        client_email: formData.email.trim(),
                        client_phone_number: formData.phone,
                        delivery: "—Å–∞–º–æ–≤—ã–≤–æ–∑",
                        text: formData.comments || "",
                    };

                    console.log(
                        "–ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å JSON –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞:",
                        pickupData
                    );

                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π fetch –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
                    try {
                        const rawResponse = await fetch(
                            "http://13.61.153.85/create_pickup/",
                            {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json",
                                },
                                body: JSON.stringify(pickupData),
                            }
                        );

                        if (rawResponse.ok) {
                            const jsonResponse = await rawResponse.json();
                            console.log("JSON –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω:", jsonResponse);

                            await sendToTelegram({
                                client_first_name: formData.firstName,
                                client_last_name: formData.lastName,
                                client_email: formData.email,
                                client_phone_number: formData.phone,
                                delivery: "—Å–∞–º–æ–≤—ã–≤–æ–∑",
                                created_at: new Date().toISOString(),
                                text: formData.comments,
                                total_price: calculateTotal(),
                                total_items: calculateTotalQuantity(),
                                receipt: formData.receipt,
                            });

                            alert("–ó–∞–∫–∞–∑ —Å —Å–∞–º–æ–≤—ã–≤–æ–∑–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!");
                        } else {
                            console.error(
                                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ JSON:",
                                await rawResponse.text()
                            );
                            throw new Error(
                                `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ JSON: ${rawResponse.status}`
                            );
                        }
                    } catch (jsonError) {
                        console.error(
                            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ JSON:",
                            jsonError
                        );
                        setValidationError(
                            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Å —Å–∞–º–æ–≤—ã–≤–æ–∑–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                        );
                    }
                }
            }
        } catch (error) {
            console.error("üö® –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", error);

            if (error instanceof Error) {
                setValidationError(error.message);
            } else if (typeof error === "object" && error !== null) {
                setValidationError(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
                );
            }
        } finally {
            setIsSubmitting(false);
        }
    };
    const handleInputChange = (
        e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
    ) => {
        const { name, value, type } = e.target as HTMLInputElement;

        if (type === "file") {
            const fileInput = e.target as HTMLInputElement;
            const file = fileInput.files?.[0];
            if (file) {
                if (!file.type.startsWith("image/")) {
                    setValidationError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
                    return;
                }
                if (file.size > 5 * 1024 * 1024) {
                    setValidationError("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB");
                    return;
                }
                setFormData((prev) => ({ ...prev, receipt: file }));
            }
        } else if (name === "phone") {
            let sanitizedValue = value.replace(/[^\d+]/g, "");

            if (!sanitizedValue.startsWith("+996")) {
                sanitizedValue =
                    "+996" + sanitizedValue.replace(/^\+?996?/, "");
            }

            if (sanitizedValue.length > 13) {
                sanitizedValue = sanitizedValue.slice(0, 13);
            }

            setFormData((prev) => ({ ...prev, phone: sanitizedValue }));
        } else {
            setFormData((prev) => ({ ...prev, [name]: value }));
        }

        setValidationError("");
    };

    if (isLoading) {
        return (
            <div className={styles.loaderBlock}>
                <div className={styles.loader}></div>
            </div>
        );
    }

    return (
        <div className={styles.mainBlock}>
            <div className="container">
                <div className={styles.block}>
                    <div className={styles.landmark}>
                        {uniqueCartItems.map((item) => (
                            <div className={styles.cardBlock} key={item.id}>
                                <div className={styles.ImgBlock}>
                                    <div className={styles.img}>
                                        <Image
                                            src={
                                                item.books.book_images[0]
                                                    .book_images
                                            }
                                            alt={item.books.book_name}
                                            width={100}
                                            height={100}
                                        />
                                    </div>
                                    <div className={styles.ImgText}>
                                        <h2>{item.books.book_name}</h2>
                                        <h3>{item.books.author}</h3>
                                        <div
                                            onClick={() =>
                                                handleDelete(item.id)
                                            }
                                            style={{ cursor: "pointer" }}
                                        >
                                            <DeleteIcon />
                                        </div>
                                    </div>
                                </div>
                                <div className={styles.quantity}>
                                    <div
                                        onClick={() =>
                                            handleQuantityChange(
                                                item.id,
                                                item.quantity,
                                                false
                                            )
                                        }
                                        style={{ cursor: "pointer" }}
                                    >
                                        <Minus />
                                    </div>
                                    <h1>{item.quantity}</h1>
                                    <div
                                        onClick={() =>
                                            handleQuantityChange(
                                                item.id,
                                                item.quantity,
                                                true
                                            )
                                        }
                                        style={{ cursor: "pointer" }}
                                    >
                                        <Plus />
                                    </div>
                                </div>
                                <div className={styles.price}>
                                    <Price />
                                    <h5>{item.books.price} —Å–æ–º</h5>
                                </div>
                            </div>
                        ))}
                    </div>
                    <form
                        onSubmit={handleSubmitOrder}
                        className={styles.mainInput}
                    >
                        <h1>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h1>
                        {validationError && (
                            <div className={styles.errorMessage}>
                                {validationError}
                            </div>
                        )}
                        <div className={styles.InputBlock}>
                            <div className={styles.BlockBtn}>
                                <button
                                    type="button"
                                    className={`${styles.delivery} ${
                                        activeButton === "delivery"
                                            ? styles.activeDelivery
                                            : ""
                                    }`}
                                    onClick={() => setActiveButton("delivery")}
                                >
                                    –î–æ—Å—Ç–∞–≤–∫–∞
                                </button>
                                <button
                                    type="button"
                                    className={`${styles.pickup} ${
                                        activeButton === "pickup"
                                            ? styles.activePickup
                                            : ""
                                    }`}
                                    onClick={() => setActiveButton("pickup")}
                                >
                                    –°–∞–º–æ–≤—ã–≤–æ–∑
                                </button>
                            </div>
                            <div className={styles.Inputs}>
                                <div className={styles.Input}>
                                    <h6>–ò–º—è</h6>
                                    <input
                                        type="text"
                                        name="firstName"
                                        value={formData.firstName}
                                        onChange={handleInputChange}
                                        required
                                    />
                                    <hr />
                                </div>
                                <div className={styles.Input}>
                                    <h6>–§–∞–º–∏–ª–∏—è</h6>
                                    <input
                                        type="text"
                                        name="lastName"
                                        value={formData.lastName}
                                        onChange={handleInputChange}
                                        required
                                    />
                                    <hr />
                                </div>
                                <div className={styles.Input}>
                                    <h6>gmail</h6>
                                    <input
                                        type="email"
                                        name="email"
                                        value={formData.email}
                                        onChange={handleInputChange}
                                        required
                                    />
                                    <hr />
                                </div>
                                <div className={styles.Input}>
                                    <h6>–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</h6>
                                    <input
                                        type="text"
                                        name="phone"
                                        value={formData.phone}
                                        onChange={handleInputChange}
                                        placeholder="+996XXXXXXXXX"
                                        required
                                    />
                                    <hr />
                                </div>
                                {activeButton === "delivery" && (
                                    <div className={styles.Input}>
                                        <h6>–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</h6>
                                        <input
                                            type="text"
                                            name="address"
                                            value={formData.address}
                                            onChange={handleInputChange}
                                            required
                                        />
                                        <hr />
                                    </div>
                                )}
                                <div className={styles.Input}>
                                    <h6>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–∫–∞–∑—É</h6>
                                    <input
                                        type="text"
                                        name="comments"
                                        value={formData.comments}
                                        onChange={handleInputChange}
                                    />
                                    <hr />
                                </div>
                            </div>
                            <div className={styles.uploadFile}>
                                <div className={styles.text1}>
                                    <h4>
                                        –¢–æ–≤–∞—Ä—ã: {calculateTotalQuantity()}—à—Ç
                                    </h4>
                                    <h4>{calculateTotal()} —Å–æ–º</h4>
                                </div>
                                <div className={styles.text2}>
                                    <h4>
                                        –¶–µ–Ω—É –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –æ–±–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç—Å—è —Å
                                        –ø—Ä–æ–¥–∞–≤—Ü–æ–º
                                    </h4>
                                </div>
                                <div className={styles.text3}>
                                    <h3>–ò—Ç–æ–≥–æ</h3>
                                    <h3>{calculateTotal()} —Å–æ–º</h3>
                                </div>
                                <div className={styles.text4}>
                                    <h2>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫ –æ–ø–ª–∞—Ç—ã</h2>
                                    <div className={styles.text5}>
                                        <p>–†–µ–∫–≤–∏–∑–∏—Ç—ã –≤ —à–∞–ø–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</p>
                                        <ImgStop />
                                    </div>
                                </div>
                                <div className={styles.upload}>
                                    <div className={styles.selectFile}>
                                        <input
                                            type="file"
                                            name="receipt"
                                            onChange={handleInputChange}
                                            required
                                        />
                                    </div>
                                    <button type="submit">
                                        –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
                                    </button>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    );
};

export default PlacinganOrder;
